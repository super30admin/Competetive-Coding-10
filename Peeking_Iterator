//TimeComplexity     O(n)
//SpaceComplexity     O(1)

class PeekingIterator implements Iterator<Integer> {

    Iterator<Integer> itr;
    Integer val;
     

	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    this.itr = iterator; 
        if(itr.hasNext()){
                val = itr.next();
        } else{
            val = null;
        }   
        
        
        
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
        return val;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    Integer temp = val;
        if(itr.hasNext()){
            val = itr.next();
        }else{
            val = null;
        }
        return temp;
	}
	
	@Override
	public boolean hasNext() {
	    if(val == null){
            return false;
        }
        return true;
	}
}
